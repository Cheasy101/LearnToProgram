// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20250503203346_Add_UserLessonHint")]
    partial class Add_UserLessonHint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.FeedbackFeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FeedbackFeeds");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedOutput")
                        .HasColumnType("text");

                    b.Property<string>("InitialCode")
                        .HasColumnType("text");

                    b.Property<string>("LessonPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("PracticeTask")
                        .HasColumnType("text");

                    b.Property<string>("SmallDescription")
                        .HasColumnType("text");

                    b.Property<string>("SolutionCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d888140-67b1-40fa-9f4f-e2d7b6890cdb"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Объяснение того, что такое переменная и как её объявить. Основные операции с переменными, такие как присваивание, обновление и использование.",
                            ExpectedOutput = "8",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Ваш код здесь\n        Console.WriteLine(\"Привет, мир!\");\n    }\n}",
                            LessonPhotoUrl = "photos/1.png",
                            PracticeTask = "Напишите программу, которая создает две переменные (a и b), присваивает им значения 5 и 3 соответственно, складывает их и выводит результат.",
                            SmallDescription = "Переменные и операции с ними",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2760),
                            VideoLink = "https://www.youtube.com/embed/KUu8nTq0J3A?si=siLjWur0blEQ1PI7"
                        },
                        new
                        {
                            Id = new Guid("d1a89d7e-946b-4233-a157-0a9f2347bc76"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2770),
                            Description = "Введение в различные типы данных, такие как целые числа (integers), дробные числа (floats) и строки (strings). Объяснение различий между типами данных и как они влияют на операции, которые можно выполнять.",
                            ExpectedOutput = "10\n3.14\nHello\ntrue",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Объявите переменные здесь\n    }\n}",
                            LessonPhotoUrl = "photos/2.png",
                            PracticeTask = "Создайте программу, которая объявляет переменные разных типов: целое число, дробное число, строку и булево значение, и выводит их значения.",
                            SmallDescription = "Типы данных",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2770),
                            VideoLink = "https://www.youtube.com/embed/fNjVCSEXpDM?si=izfYrobvcVdf2ZAT"
                        },
                        new
                        {
                            Id = new Guid("c3681d05-7b21-4a23-b08e-87e88d1b1a2d"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2780),
                            Description = "Как получать данные от пользователя через консоль (ввод) и выводить результаты работы программы (вывод). Работа с функциями input() и print() для взаимодействия с пользователем.",
                            ExpectedOutput = "Привет, Иван! Тебе 25 лет.",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.Write(\"Введите ваше имя: \");\n        // Ваш код здесь\n    }\n}",
                            LessonPhotoUrl = "photos/3.png",
                            PracticeTask = "Напишите программу, которая запрашивает у пользователя его имя и возраст, а затем выводит приветствие в формате: \"Привет, [имя]! Тебе [возраст] лет.\"",
                            SmallDescription = "Ввод и вывод данных",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2780),
                            VideoLink = "https://www.youtube.com/embed/13SIaLUXicE?si=mgQcjoiYZJ2d428F"
                        },
                        new
                        {
                            Id = new Guid("61836fd1-6f07-4120-a92c-cb6b1a88bb9d"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2780),
                            Description = "Введение в операторы условия, такие как if, else и elif. Как использовать условные операторы для принятия решений в программе в зависимости от определённых условий.",
                            ExpectedOutput = "Число 7 является нечетным",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int number = 7;\n        // Ваш код здесь\n    }\n}",
                            LessonPhotoUrl = "photos/4.png",
                            PracticeTask = "Напишите программу, которая проверяет, является ли число четным или нечетным, и выводит соответствующее сообщение.",
                            SmallDescription = "Условные операторы",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2780),
                            VideoLink = "https://www.youtube.com/embed/agse5YvwKoo?si=a-fGwqwpwrFpP_vU"
                        },
                        new
                        {
                            Id = new Guid("40c446f1-9143-4680-8343-bd26119b4dc9"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2780),
                            Description = "Рассмотрение циклов, таких как цикл for и цикл while. Использование циклов для выполнения повторяющихся задач, таких как обход элементов списка или выполнение определённого количества итераций.",
                            ExpectedOutput = "2\n4\n6\n8\n10",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Ваш код здесь\n    }\n}",
                            LessonPhotoUrl = "photos/5.png",
                            PracticeTask = "Напишите программу, которая выводит все четные числа от 1 до 10.",
                            SmallDescription = "Циклы",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2780),
                            VideoLink = "https://www.youtube.com/embed/MFSx0tbcRqc?si=D54HfFY_yJqrkk4L"
                        },
                        new
                        {
                            Id = new Guid("f0164016-19ae-44b1-8428-8a03289bbcd8"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2790),
                            Description = "Понятие функций как набора инструкций, который может быть вызван из других частей программы. Создание и использование собственных функций для повторного использования кода.",
                            ExpectedOutput = "8",
                            InitialCode = "using System;\n\npublic class Program\n{\n    // Объявите функцию здесь\n    \n    public static void Main()\n    {\n        // Вызовите функцию здесь\n    }\n}",
                            LessonPhotoUrl = "photos/6.png",
                            PracticeTask = "Создайте функцию, которая принимает два числа и возвращает их сумму. Вызовите эту функцию с аргументами 5 и 3 и выведите результат.",
                            SmallDescription = "Функции",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2790),
                            VideoLink = "https://www.youtube.com/embed/Xk8vRnm6xtc?si=BTMMP8uw5BLyufAD"
                        },
                        new
                        {
                            Id = new Guid("a8106166-fdf7-44c5-97ca-8e8dd953efb9"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2790),
                            Description = "Введение в основные структуры данных, такие как списки (lists) и словари (dictionaries). Как использовать эти структуры данных для хранения и организации информации.",
                            ExpectedOutput = "Яблоко\nГруша\nБанан",
                            InitialCode = "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Ваш код здесь\n    }\n}",
                            LessonPhotoUrl = "photos/7.png",
                            PracticeTask = "Создайте список из трех элементов (строк) и выведите каждый элемент на новой строке.",
                            SmallDescription = "Структуры данных",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2790),
                            VideoLink = "https://www.youtube.com/embed/watch?v=GcAwk3TjoaE"
                        },
                        new
                        {
                            Id = new Guid("3f38795f-a68d-47db-9533-c5b16564fc96"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2800),
                            Description = "Как открывать, читать и записывать данные в файлы на компьютере. Различные режимы работы с файлами: чтение (read), запись (write), добавление (append) и т.д.",
                            ExpectedOutput = "Файл успешно создан и записан",
                            InitialCode = "using System;\nusing System.IO;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Ваш код здесь\n        Console.WriteLine(\"Файл успешно создан и записан\");\n    }\n}",
                            LessonPhotoUrl = "photos/8.png",
                            PracticeTask = "Напишите программу, которая создает файл 'test.txt' и записывает в него строку 'Hello, World!'.",
                            SmallDescription = "Работа с файлами",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2800),
                            VideoLink = "https://www.youtube.com/embed/rj9KHVLXaME?si=ktdv-uh5W8RnE0YQ"
                        },
                        new
                        {
                            Id = new Guid("46b9142b-9179-4a32-a97c-3de4289c34a4"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2800),
                            Description = "Понятие и обработка исключений (exceptions) в программировании. Как использовать конструкцию try-except для предотвращения сбоев программы при возникновении ошибок.",
                            ExpectedOutput = "Деление на ноль невозможно",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try\n        {\n            // Ваш код здесь\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\"Деление на ноль невозможно\");\n        }\n    }\n}",
                            LessonPhotoUrl = "photos/9.png",
                            PracticeTask = "Напишите программу, которая пытается разделить число на ноль и корректно обрабатывает исключение, выводя сообщение 'Деление на ноль невозможно'.",
                            SmallDescription = "Обработка ошибок",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2800),
                            VideoLink = "https://www.youtube.com/embed/dbxWEe4Ke58?si=VQczxwIAAMMtz4h6"
                        },
                        new
                        {
                            Id = new Guid("031181a8-6b65-44bc-83f1-f5c4c2dbdfd2"),
                            CreatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Обзор базовых алгоритмических концепций, таких как сортировка и поиск. Введение в основные структуры данных, такие как стеки, очереди и деревья.",
                            ExpectedOutput = "1 2 3 5 8",
                            InitialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int[] array = { 5, 3, 8, 1, 2 };\n        // Ваш код здесь\n    }\n}",
                            LessonPhotoUrl = "photos/10.png",
                            PracticeTask = "Реализуйте алгоритм пузырьковой сортировки для массива [5, 3, 8, 1, 2] и выведите отсортированный массив.",
                            SmallDescription = "Основы алгоритмов и структур данных",
                            UpdatedAt = new DateTime(2025, 5, 3, 20, 33, 46, 450, DateTimeKind.Utc).AddTicks(2810),
                            VideoLink = "https://www.youtube.com/embed/CB9bS46vl04?si=1musPvHKSRQivKL7"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33f3f505-60e8-4656-aa3d-5f427192c489"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("4b960fc2-23bc-4003-a03d-552fba0e579e"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6d8e2ffc-8500-407b-9fee-0312cacbfb48"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserPhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserLessonHint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptsThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<string>("HintText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId", "LessonId")
                        .IsUnique();

                    b.ToTable("UserLessonHints", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<int?>("CompletionTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserCode")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersStats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserLessonHint", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserStats", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
