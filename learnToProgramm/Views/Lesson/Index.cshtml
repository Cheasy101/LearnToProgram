@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Contracts.Requests.lesson.LessonPageResponseModel

@{
    System.Diagnostics.Debug.Assert(Model.LessonByIdDto.SmallDescription != null, "Model.LessonByIdDto.SmallDescription != null");
    ViewBag.Title = Model.LessonByIdDto.SmallDescription;
    Layout = "_Layout";
}

<div id="lesson" class="section">
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <h2>@Model.LessonByIdDto.SmallDescription</h2>
                <img src="@Url.Content(Model.LessonByIdDto.LessonPhotoUrl)" class="img-responsive" alt="Изображение курса">
                <p>@Model.LessonByIdDto.Description</p>

                @if (!string.IsNullOrEmpty(Model.LessonByIdDto.VideoLink))
                {
                    <iframe width="560" height="315"
                            data-src="@Model.LessonByIdDto.VideoLink"
                            title="YouTube video player"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            referrerpolicy="strict-origin-when-cross-origin"
                            allowfullscreen
                            class="lazyload-iframe">
                    </iframe>
                    <!-- Ваш iframe с ютубчиком -->

                    <script>
                            document.addEventListener("DOMContentLoaded", function() {
                                var lazyloadIframes = document.querySelectorAll('.lazyload-iframe');
                                if ("IntersectionObserver" in window) {
                                    var iframeObserver = new IntersectionObserver(function(entries, observer) {
                                        entries.forEach(function(entry) {
                                            if (entry.isIntersecting) {
                                                var iframe = entry.target;
                                                iframe.src = iframe.dataset.src;
                                                iframeObserver.unobserve(iframe);
                                            }
                                        });
                                    });

                                    lazyloadIframes.forEach(function(iframe) {
                                        iframeObserver.observe(iframe);
                                    });
                                } else {
                                    // Fallback for browsers without Intersection Observer support
                                    lazyloadIframes.forEach(function(iframe) {
                                        iframe.src = iframe.dataset.src;
                                    });
                                }
                            });
                    </script>
                }

                <!-- ===== [1] Блок с компилятором ===== -->
                <div class="mt-5">
                    <h4>Практика: напишите код и нажмите "Запустить"</h4>
                    <div id="editor" style="width: 100%; height: 300px; border: 1px solid #ddd;"></div>
                    <button id="runButton" class="btn btn-primary mt-2">Запустить код</button>
                    <div id="output" style="margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;"></div>
                </div>

                <!-- Форма для отметки урока -->
                <form asp-controller="Lesson" asp-action="SubmitFeedback" method="post">
                    <input type="hidden" name="LessonId" value="@Model.LessonByIdDto.Id"/>
                    <input type="hidden" name="UserId" value="@User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value"/>
                    <button type="submit" class="btn btn-success mt-3">Отметить как пройденное</button>
                </form>
            </div>
            <div class="col-md-4">
                <div class="sidebar">
                    <h3>Related Lessons</h3>
                    <ul>
                        @foreach (var lesson in Model.AllLessonsForSidebarDto)
                        {
                            <li>
                                <a asp-controller="Lesson" asp-action="Index" asp-route-id="@lesson.Id">@lesson.Description</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ===== [2] Подключаем Monaco Editor и компилятор ===== -->

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script>
    // Инициализация редактора кода
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
    require(['vs/editor/editor.main'], function() {
        const editor = monaco.editor.create(document.getElementById('editor'), {
            value: `// Напишите код на C# и нажмите "Запустить"\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine("Привет, мир!");\n    }\n}`,
            language: 'csharp',
            theme: 'vs-light',
            automaticLayout: true
        });

        // Обработчик кнопки "Запустить"
        document.getElementById('runButton').addEventListener('click', async () => {
            const code = editor.getValue();
            const outputElement = document.getElementById('output');
            outputElement.textContent = "Выполнение...";

            try {
                // Используем Piston API (бесплатный компилятор)
                const response = await fetch('https://emkc.org/api/v2/piston/execute', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        language: 'csharp',
                        version: '6.12.0',
                        files: [{ content: code }]
                    })
                });
                const result = await response.json();
                outputElement.textContent = result.output || result.error;
            } catch (error) {
                outputElement.textContent = "Ошибка: " + error.message;
            }
        });
    });
</script>
}