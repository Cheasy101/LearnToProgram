@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Contracts.Requests.lesson.LessonPageResponseModel

@{
    System.Diagnostics.Debug.Assert(Model.LessonByIdDto.SmallDescription != null, "Model.LessonByIdDto.SmallDescription != null");
    ViewBag.Title = Model.LessonByIdDto.SmallDescription;
    Layout = "_Layout";
}

<div id="lesson" class="section">
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <h2>@Model.LessonByIdDto.SmallDescription</h2>
                <img src="@Url.Content(Model.LessonByIdDto.LessonPhotoUrl)" class="img-responsive" alt="Изображение курса">
                <p>@Model.LessonByIdDto.Description</p>

                @if (!string.IsNullOrEmpty(Model.LessonByIdDto.VideoLink))
                {
                    <iframe width="560" height="315"
                            data-src="@Model.LessonByIdDto.VideoLink"
                            title="YouTube video player"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            referrerpolicy="strict-origin-when-cross-origin"
                            allowfullscreen
                            class="lazyload-iframe">
                    </iframe>

                    <script>
                    document.addEventListener("DOMContentLoaded", function() {
                        var lazyloadIframes = document.querySelectorAll('.lazyload-iframe');
                        if ("IntersectionObserver" in window) {
                            var iframeObserver = new IntersectionObserver(function(entries, observer) {
                                entries.forEach(function(entry) {
                                    if (entry.isIntersecting) {
                                        var iframe = entry.target;
                                        iframe.src = iframe.dataset.src;
                                        iframeObserver.unobserve(iframe);
                                    }
                                });
                            });

                            lazyloadIframes.forEach(function(iframe) {
                                iframeObserver.observe(iframe);
                            });
                        } else {
                            lazyloadIframes.forEach(function(iframe) {
                                iframe.src = iframe.dataset.src;
                            });
                        }
                    });
                </script>
                }

                <!-- Блок практики с компилятором -->
                <div class="practice-section mt-5">
                    <h4 class="mb-3">Практическое задание</h4>

                    @if (!string.IsNullOrEmpty(Model.LessonByIdDto.PracticeTask))
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">Задание:</h5>
                                <p class="card-text">@Model.LessonByIdDto.PracticeTask</p>
                            </div>
                        </div>
                    }

                    <div id="editor" style="width:100%; height:400px; border:1px solid #ddd;"></div>

                    <div class="mt-3 d-flex justify-content-between">
                        <button id="runButton" class="btn btn-success">
                            <i class="fas fa-play mr-2"></i>Запустить код
                        </button>
                        <button id="checkButton" class="btn btn-primary" disabled>
                            <i class="fas fa-check mr-2"></i>Проверить решение
                        </button>
                        <button id="resetButton" class="btn btn-outline-secondary">
                            <i class="fas fa-redo mr-2"></i>Сбросить
                        </button>
                    </div>

                    <!-- Блоки вывода -->
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="card mt-3">
                                <div class="card-header bg-info text-white">
                                    <h5 class="mb-0">Консольный вывод</h5>
                                </div>
                                <div id="code-output" class="card-body p-3 bg-dark text-white"
                                     style="height:200px; overflow-y:auto; font-family:monospace;">
                                    > Готов к выполнению...
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mt-3">
                                <div class="card-header bg-warning text-dark">
                                    <h5 class="mb-0">Ошибки компиляции</h5>
                                </div>
                                <div id="error-output" class="card-body p-3 bg-light text-danger"
                                     style="height:200px; overflow-y:auto; font-family:monospace;">
                                    <!-- Здесь будут ошибки -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Блок результата проверки -->
                    <div id="check-result" class="mt-3" style="display: none;">
                        <div class="alert alert-success" style="display: none;">
                            <i class="fas fa-check-circle mr-2"></i>
                            <span id="success-message">Задание выполнено успешно!</span>
                            <div id="attempts-info" class="mt-2"></div>
                        </div>
                        <div class="alert alert-danger" style="display: none;">
                            <i class="fas fa-times-circle mr-2"></i>
                            <span id="fail-message">Задание не выполнено. Попробуйте еще раз.</span>
                            <div id="attempts-count" class="mt-2"></div>
                        </div>
                    </div>
                </div>

                <!-- Форма завершения урока -->
                <form id="completeForm" asp-controller="Lesson" asp-action="SubmitFeedback" method="post" class="mt-4">
                    <input type="hidden" name="LessonId" value="@Model.LessonByIdDto.Id"/>
                    <input type="hidden" name="UserId"
                           value="@User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value"/>
                    <input type="hidden" id="isPracticeCompleted" name="IsPracticeCompleted" value="false"/>
                    <button type="submit" id="completeButton" class="btn btn-lg btn-success" disabled>
                        <i class="fas fa-check-circle mr-2"></i>Завершить урок
                    </button>
                </form>
            </div>

            <div class="col-md-4">
                <div class="sidebar">
                    <h3>Связанные уроки</h3>
                    <ul class="list-group">
                        @foreach (var lesson in Model.AllLessonsForSidebarDto)
                        {
                            <li class="list-group-item">
                                <a asp-controller="Lesson" asp-action="Index" asp-route-id="@lesson.Id">@lesson.Description</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Подключаем Monaco Editor -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <!-- Font Awesome для иконок -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
    // Инициализация редактора
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
    require(['vs/editor/editor.main'], function() {
        // Начальный код из модели или дефолтный
        const initialCode = `@Html.Raw(Model.LessonByIdDto.InitialCode ?? "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Напишите свой код здесь\n        Console.WriteLine(\"Привет, мир!\");\n    }\n}")`;

        // Создаем редактор
        const editor = monaco.editor.create(document.getElementById('editor'), {
            value: initialCode,
            language: 'csharp',
            theme: 'vs-light',
            automaticLayout: true,
            minimap: { enabled: false },
            fontSize: 14,
            scrollBeyondLastLine: false
        });

        // Элементы вывода
        const consoleEl = document.getElementById('code-output');
        const errorEl = document.getElementById('error-output');
        const checkResult = document.getElementById('check-result');
        const successAlert = checkResult.querySelector('.alert-success');
        const failAlert = checkResult.querySelector('.alert-danger');
        const attemptsInfo = document.getElementById('attempts-info');
        const attemptsCount = document.getElementById('attempts-count');

        let lastExecutionOutput = '';

        // Обработчик кнопки запуска
        document.getElementById('runButton').addEventListener('click', async function() {
            const code = editor.getValue();
            consoleEl.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Выполнение...';
            errorEl.innerHTML = '';

            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 секунд таймаут

                // Проверка опасных операций
                if (code.includes('System.IO') || code.includes('Process.Start')) {
                    throw new Error('Запрещённые операции в коде');
                }

                const response = await fetch('https://emkc.org/api/v2/piston/execute', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        language: 'csharp',
                        version: '6.12.0',
                        files: [{ content: code }]
                    }),
                    signal: controller.signal
                });

                clearTimeout(timeoutId);
                const result = await response.json();

                // Сохраняем вывод для последующей проверки
                lastExecutionOutput = result.run.stdout || result.run.output || '';

                // Обработка результата
                if (result.run.stdout) {
                    consoleEl.innerHTML = '> ' + result.run.stdout.replace(/\n/g, '<br>> ');
                }

                if (result.run.stderr) {
                    errorEl.innerHTML = result.run.stderr.replace(/\n/g, '<br>');
                } else if (result.run.output) {
                    consoleEl.innerHTML = '> ' + result.run.output.replace(/\n/g, '<br>> ');
                }

                // Активируем кнопку проверки после успешного выполнения
                document.getElementById('checkButton').disabled = false;

            } catch (error) {
                errorEl.innerHTML = `Ошибка: ${error.message}`;
                consoleEl.innerHTML = '> Выполнение прервано';
            }
        });

        // Кнопка проверки решения
        document.getElementById('checkButton').addEventListener('click', async function() {
            const lessonId = '@Model.LessonByIdDto.Id';
            const userOutput = lastExecutionOutput;

            if (!userOutput) {
                showError('Сначала запустите код');
                return;
            }

            try {
                const response = await fetch('/lesson/check-practice', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        lessonId: lessonId,
                        userOutput: userOutput
                    })
                });

                if (!response.ok) {
                    throw new Error(await response.text());
                }

                const result = await response.json();

                // Показываем блок с результатом
                checkResult.style.display = 'block';

                if (result.isSuccessful) {
                    // Успешное выполнение
                    successAlert.style.display = 'block';
                    failAlert.style.display = 'none';
                    attemptsInfo.innerHTML = `Попыток: ${result.attempts}`;

                    // Разблокируем кнопку завершения урока
                    document.getElementById('completeButton').disabled = false;
                    document.getElementById('isPracticeCompleted').value = 'true';
                } else {
                    // Неудачное выполнение
                    successAlert.style.display = 'none';
                    failAlert.style.display = 'block';

                    let message = `Попыток: ${result.attempts}`;

                    if (result.expectedOutput) {
                        message += `<div class="mt-2"><strong>Ожидаемый вывод:</strong><br>${result.expectedOutput.replace(/\n/g, '<br>')}</div>`;
                    }

                    attemptsCount.innerHTML = message;
                }
            } catch (error) {
                showError('Ошибка при проверке задания: ' + error.message);
            }
        });

        // Кнопка сброса
        document.getElementById('resetButton').addEventListener('click', function() {
            editor.setValue(initialCode);
            consoleEl.innerHTML = '> Готов к выполнению...';
            errorEl.innerHTML = '';
            checkResult.style.display = 'none';
            document.getElementById('checkButton').disabled = true;
            document.getElementById('completeButton').disabled = true;
        });

        // Вспомогательные функции
        function showError(message) {
            errorEl.innerHTML = message;
            errorEl.style.display = 'block';

            setTimeout(() => {
                errorEl.style.display = 'none';
            }, 5000);
        }
    });
</script>
}